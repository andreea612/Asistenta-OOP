import os
from datetime import datetime
import threading
import time

class File:
    def __init__(self, name, created_time, updated_time):
        self.name = name
        self.created_time = created_time
        self.updated_time = updated_time

    def get_info(self):
        return f"Name: {self.name}\nCreated Time: {self.created_time}\nUpdated Time: {self.updated_time}"

class TextFile(File):
    def __init__(self, name, created_time, updated_time, line_count, word_count, char_count):
        super().__init__(name, created_time, updated_time)
        self.line_count = line_count
        self.word_count = word_count
        self.char_count = char_count

    def get_info(self):
        return super().get_info() + f"\nLine Count: {self.line_count}\nWord Count: {self.word_count}\nCharacter Count: {self.char_count}"

class ImageFile(File):
    def __init__(self, name, created_time, updated_time, size):
        super().__init__(name, created_time, updated_time)
        self.size = size

    def get_info(self):
        return super().get_info() + f"\nSize: {self.size}"

class ProgramFile(File):
    def __init__(self, name, created_time, updated_time, line_count, class_count, method_count):
        super().__init__(name, created_time, updated_time)
        self.line_count = line_count
        self.class_count = class_count
        self.method_count = method_count

    def get_info(self):
        return super().get_info() + f"\nLine Count: {self.line_count}\nClass Count: {self.class_count}\nMethod Count: {self.method_count}"

class FolderMonitor:
    def __init__(self, folder):
        self.folder = folder
        self.files = []
        self.lock = threading.Lock()
        self.snapshot_time = None

    def add_file(self, filename):
        if filename.endswith('.txt'):
            self.files.append(filename)
        elif filename.endswith(('.png', '.jpg')):
            self.files.append(filename)
        elif filename.endswith('.py'):
            self.files.append(filename)
        else:
            print(f"Ignored file: {filename}")

    def get_files_in_folder(self):
        return [f for f in os.listdir(self.folder) if os.path.isfile(os.path.join(self.folder, f))]

    def detect_changes(self):
        while True:
            current_files = self.get_files_in_folder()
            time.sleep(5) 

            new_files = set(current_files) - set(self.files)
            deleted_files = set(self.files) - set(current_files)

            for file in new_files:
                print(f"{file} - New File")
            for file in deleted_files:
                print(f"{file} - Deleted")

    def start_detection_thread(self):
        detection_thread = threading.Thread(target=self.detect_changes)
        detection_thread.daemon = True
        detection_thread.start()

    def commit(self):
        self.snapshot_time = datetime.now()
        print(f"Snapshot taken at: {self.snapshot_time}")

    def status(self):
        if self.snapshot_time:
            print(f"Snapshot time: {self.snapshot_time}")
        else:
            print("No snapshot taken yet.")

    def info(self, filename):
        if os.path.exists(filename):
            file_extension = filename.split('.')[-1].lower()
            created_time = datetime.fromtimestamp(os.path.getctime(filename)).strftime("%Y-%m-%d %H:%M:%S")
            updated_time = datetime.fromtimestamp(os.path.getmtime(filename)).strftime("%Y-%m-%d %H:%M:%S %Z")

            if file_extension == 'txt':
                with open(filename, 'r', encoding='utf-8') as f:
                    line_count = sum(1 for line in f)
                    f.seek(0)
                    word_count = sum(len(line.split()) for line in f)
                    f.seek(0)
                    char_count = sum(len(line) for line in f)
                file_obj = TextFile(filename, created_time, updated_time, line_count, word_count, char_count)
            elif file_extension in ['png', 'jpg']:
                size = os.path.getsize(filename)
                file_obj = ImageFile(filename, created_time, updated_time, size)
            elif file_extension in ['py']:
                with open(filename, 'r', encoding='utf-8') as f:
                    line_count = sum(1 for line in f)
                    f.seek(0)
                    class_count = sum(1 for line in f if line.strip().startswith('class '))
                    f.seek(0)
                    method_count = sum(1 for line in f if line.strip().startswith('def '))
                file_obj = ProgramFile(filename, created_time, updated_time, line_count, class_count, method_count)
            else:
                file_obj = File(filename, created_time, updated_time)

            print(file_obj.get_info())
        else:
            print("File not found.")

def user_input(folder_monitor):
    while True:
        command = input("Enter command (commit/status/info <filename>): ").split()
        if command[0] == 'commit':
            folder_monitor.commit()
        elif command[0] == 'status':
            folder_monitor.status()
        elif command[0] == 'info':
            if len(command) > 1:
                folder_monitor.info(command[1])
            else:
                print("Filename not provided.")
        else:
            print("Invalid command. Please use 'commit', 'status', or 'info <filename>'.")

folder_path = '/Users/andre/OOP/OOP3'
folder_monitor = FolderMonitor(folder_path)

folder_monitor.start_detection_thread()
user_input(folder_monitor)

while True:
    pass
